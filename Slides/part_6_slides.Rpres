Recommendations
========================================================
author: 
date: 
autosize: true

<style>
.small-code pre code {
  font-size: 1em;
}
</style>

```{r, echo = F}
library(tidyverse)
library(igraph)
library(magrittr)
```

MovieLens Data Set
========================================================
We will make recommendations for people who have rated movies in MovieLens dataset provided by the [GroupLens group a the University of Minnesota](https://grouplens.org/datasets/movielens/)

MovieLens Data Set - Links
=====
```{r, echo = F}
links <- read_csv('../Data/ml-latest-small/links.csv')
movies <- read_csv('../Data/ml-latest-small/movies.csv')
ratings <- read_csv('../Data/ml-latest-small/ratings.csv')
tags <- read_csv('../Data/ml-latest-small/tags.csv')
```

```{r}
head(links)
```

MovieLens Data Set - Movies
===
class:small-code
```{r}
head(movies)
```

MovieLens Data Set - Ratings
===
```{r}
head(ratings)
```

MovieLens Data Set - Tags
===
class:small-code
```{r}
head(tags)
```

MovieLens Data Set - Edges
====
class:small-code
```{r}
movie_genre_edges <- movies %>%
  mutate(genres = str_split(genres, '\\|')) %>%
  unnest() %>%
  select(title, genres) %>%
  rename(from =title,
         to = genres) %>%
  mutate(type = 'HAS GENRE')

user_movie_edges <- ratings %>% 
  left_join(movies) %>%
  select(userId, title, rating, timestamp) %>%
  mutate(userId = str_c('USER:', userId)) %>%
  rename(from = userId,
         to = title) %>%
  mutate(type = 'RATED')

user_tag_edges <- tags %>%
  left_join(movies) %>%
  select(userId, tag, title) %>%
  mutate(userId = str_c('USER:', userId)) %>%
  rename(from = userId,
         to = tag,
         info = title) %>%
  mutate(type = 'USED TAG')
```

MovieLens Data Set - Edges 
====
class:small-code
```{r}
movie_tag_edges <- tags %>%
  left_join(movies) %>%
  select(title, tag, userId) %>%
  mutate(userId = str_c('USER:', userId)) %>%
  rename(from = title,
         to = tag, 
         info = userId) %>%
  mutate(type = 'WAS TAGGED')

el <- ls() %>%
  .[str_detect(., '_edges$')] %>%
  map(get) %>%
  bind_rows
```

MovieLens - Knowledge Graph
===
class:small-code
```{r}
movie_g <- graph_from_data_frame(el, T)
movie_g %>%
  summary()
```

MovieLens - Knowledge Graph
====
class:small-code
```{r}
movie_g <- movie_g %>%
  E() %>%
  .[type == 'RATED'] %>%
  ends(movie_g, .) %>%
  (function(x){
    movie_g %>%
      set_vertex_attr('type', x[,1], 'USER') %>%
      set_vertex_attr('type', x[,2], 'MOVIE')
  }) %>%
  (function(x){
    x %>%
      E() %>%
      .[type == 'WAS TAGGED'] %>%
      head_of(x, .) %>%
      unique() %>%
      set_vertex_attr(x, 'type', ., 'TAG')
  }) 
````

MovieLens - Knowledge Graph
===
class:small-code
```{r}
movie_g <- movie_g %>%
  (function(x){
    x %>%
      E() %>%
      .[type == 'HAS GENRE'] %>%
      head_of(x, .) %>%
      unique() %>%
      set_vertex_attr(x, 'type', ., 'GENRE')
  }) %>%
  (function(x){
    x %>%
      V() %>%
      .[is.na(type)] %>%
      set_vertex_attr(x, 'type', ., 'MOVIE')
  }) %>%
  (function(x){
    E(x)[V(x)[type == 'MOVIE'] %<-% V(x)[type == 'USER']] %>%
      subgraph.edges(x, .) %>%
      as_data_frame() %>%
      group_by(to) %>%
      summarize(ave_rating = mean(rating)) %>%
      {set_vertex_attr(x, 'ave_rating', .$to, .$ave_rating)}
  })
```


MovieLens - What Movies Stand Out?
====
class:small-code
```{r}
movie_g %>%
  {. - E(.)[type != 'RATED']} %>%
  {. - V(.)[degree(.) < 1]} %>%
  {
    tibble(
      movie = head_of(., E(.))$name,
      rating = E(.)$rating
      ) %>%
      group_by(movie) %>%
      summarize(
        ave_rating = mean(rating),
        num_rates = n()
      )
  } %>%
  arrange(desc(ave_rating), desc(num_rates)) %>%
  filter(num_rates >= 10)
```

MovieLens - Let's pull out those movies
=====
class:small-code
```{r}
explore <- movie_g %>%
  V() %>%
  .[str_detect(name, 'Godfather, The|Shawshank Redemption')] 

explore
```

MovieLens - Who rated those movies?
=====
class:small-code
```{r}
explore %<>%
  adjacent_vertices(movie_g, ., 'in') %>%
  do.call(c, .) %>%
  .[type == 'USER'] %>%
  unique 

explore
```

MovieLens - What other movies are they watching?
====
class:small-code
```{r}
explore %<>%
  {E(movie_g)[. %--% V(movie_g)[type == 'MOVIE']]} %>%
  {movie_g - (E(movie_g)[!E(movie_g) %in% .])}

explore 
```

MovieLens- (preperation)
====
class:small-code
```{r}
explore %<>%
  (function(x){
    edge.attributes(x) %>%
      as.tibble() %>%
      mutate(
        tail = tail_of(x, E(x))$name,
        head = head_of(x, E(x))$name
      )
  }) 

explore
```


MovieLens - What do we know about these raters?
====
class:small-code
```{r}
explore %<>%
  group_by(tail) %>%
  summarize(
    ave_rating = mean(rating),
    num_rates = n()
  ) %>%
  arrange(desc(ave_rating), desc(num_rates)) 

explore
```

MovieLens - Who Shares a Rater's Movie Interest?
=====
class:small-code
```{r}
explore2 <- movie_g %>%
  {E(.)['USER:443' %--% V(.)[type == 'MOVIE']]} %>%
  .[rating >= 4] %>%
  head_of(movie_g, .) %>%
  {E(movie_g)[. %--% V(movie_g)[type == 'USER']]} %>%
  .[rating >= 4] 

explore2
```


MovieLens - What movies do these people like?
===
class:small-code
```{r}
explore2 %<>%
  (function(x){
    similar_users <- tail_of(movie_g, x)

    movie_g %>%
      {. - E(.)[type != 'RATED']} %>%
      {. - E(.)[E(.) %in% x]} %>%
      {. - V(.)[!V(.)[type == 'USER'] %in% similar_users]}
  }) 

explore2
```

MovieLens - Which of these Movies has the User not rated?
====
class:small-code
```{r}
explore2 %<>%
  (function(x){
    movies_rated <- x %>%
      E() %>%
      .['USER:443' %--% V(x)[type == 'MOVIE']] %>% 
      head_of(x, .)
    x - movies_rated 
  }) %>%
  degree(.,V(.)[type == 'MOVIE']) %>%
  sort(T) %>%
  .[1:5] 

explore2
```

MovieLens - Sanity Check
====
class:small-code
```{r}
movie_g %>% 
  E() %>% 
  .['USER:443' %--% V(movie_g)[type == "MOVIE"]] %>%
  head_of(movie_g, .) %>% 
  .$name %>% sort
```

Blogs To Look Out For
=====

Neo4j
[https://neo4j.com/blog/](https://neo4j.com/blog/)

Kelvin Lawrence
[http://kelvinlawrence.net/book/Gremlin-Graph-Guide.html](http://kelvinlawrence.net/book/Gremlin-Graph-Guide.html)

Jason Plurad
[https://twitter.com/pluradj](https://twitter.com/pluradj)